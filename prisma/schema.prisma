generator client {
  provider = "prisma-client-js"
}

enum Provider {
  GITHUB
  CREDENTIALS
}

enum Env {
  LOCAL
  DEV
  PRE
  PRO
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model User {
  id           String    @id @default(uuid())
  provider     Provider  @default(CREDENTIALS)
  username     String?
  password     String?
  completeName String?   @map("complete_name")
  avatar       String?
  email        String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  Project      Project[]

  @@index([provider, username], name: "provider_username")
  @@index([provider, email], name: "provider_email")
  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  imageUrl    String?  @map("image_url")
  favorite    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  Group       Group[]

  @@unique([slug, userId], name: "slug_user_id")
  @@index([userId], name: "user_id")
  @@index([name], name: "project_name")
  @@index([name, userId], name: "name_user_id")
  @@map("projects")
}

model Group {
  id          String        @id @default(uuid())
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String        @map("project_id")
  tag         String
  name        String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  credentials Credentials[]
  urls        Url[]
  notes       Note?

  @@unique([tag, projectId], name: "tag_project_id")
  @@index([projectId], name: "project_id")
  @@index([name], name: "group_name")
  @@map("groups")
}

model Credentials {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String   @map("group_id")
  username    String
  password    String
  environment Env      @default(LOCAL)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([groupId], name: "credentials_group_id")
  @@map("credentials")
}

model Url {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String   @map("group_id")
  url         String
  environment Env      @default(LOCAL)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([groupId], name: "url_group_id")
  @@map("urls")
}

model Note {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String   @unique @map("group_id")
  note      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([groupId], name: "notes_group_id")
  @@map("notes")
}
